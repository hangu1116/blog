{"componentChunkName":"component---src-templates-blog-post-js","path":"/读书笔记/代码整洁之道Clean Code/","result":{"data":{"site":{"siteMetadata":{"title":"cyj's notebook"}},"markdownRemark":{"id":"c278d5a0-d7a5-5fd1-9109-e31a634117ed","excerpt":"Test Driven Development，测试驱动开发 勒布朗（ LeBlanc）法则：稍后等于永不（ Later equals never） Bjarne Stroustrup， C + +语言发明者， C + + Programming Language（中译版《 C…","html":"<p>Test Driven Development，测试驱动开发</p>\n<p>勒布朗（ LeBlanc）法则：稍后等于永不（ Later equals never）</p>\n<p>Bjarne Stroustrup， C + +语言发明者， C + + Programming Language（中译版《 C + +程序设计语言》）一书作者</p>\n<p>Grady Booch， Object Oriented Analysis and Design with Applications（中译版《面向对象分析与设计》）一书作者</p>\n<ul>\n<li>Michael Feathers， Working Effectively with Legacy Code（中译版《修改代码的艺术》）一书作者</li>\n<li>Ron Jeffries， Extreme Programming Installed（中译版《极限编程实施》）以及 Extreme Programming Adventures in C#（中译版《 C#极限编程探险》）作者</li>\n<li>Ward Cunningham， Wiki发明者， eXtreme Programming（极限编程）的创始人之一， Smalltalk语言和面向对象的思想领袖。所有在意代码者的教父</li>\n</ul>\n<h3>第1章 整洁代码</h3>\n<ol>\n<li>将需求明确到机器可以执行的细节程度，就是编程要做的事。而这种规约正是代码。 </li>\n<li>多数经理想要好代码，即便他们总是痴缠于进度。他们会奋力卫护进度和需求；那是他们该干的。你则当以同等的热情卫护代码。</li>\n<li>Bjarne以“整洁的代码只做好一件事”结束论断。毋庸置疑，软件设计的许多原则最终都会归结为这句警语。有那么多人发表过类似的言论。糟糕的代码想做太多事，它意图混乱、目的含混。整洁的代码力求集中。每个函数、每个类和每个模块都全神贯注于一事，完全不受四周细节的干扰和污染。</li>\n<li>整洁的代码应可由作者之外的开发者阅读和增补。它应当有单元测试和验收测试。它使用有意义的命名。它只提供一种而非多种做一件事的途径。它只有尽量少的依赖关系，而且要明确地定义和提供清晰、尽量少的 API。</li>\n<li>Dave断言，整洁的代码便于其他人加以增补。这看似显而易见，但亦不可过分强调。毕竟易读的代码和易修改的代码之间还是有区别的。</li>\n<li>Dave两次提及“尽量少”。显然，他推崇小块的代码。实际上，从有软件起人们就在反复强调这一点。越小越好。</li>\n<li>Dave也提到，代码应在字面上表达其含义。这一观点源自 Knuth的“字面编程”（ literate programming）[ 6]。 简单代码，依其重要顺序：能通过所有测试；没有重复代码；体现系统中的全部设计理念；包括尽量少的实体，比如类、方法、函数等。在以上诸项中，我最在意代码重复。如果同一段代码反复出现，就表示某种想法未在代码中得到良好的体现。我尽力去找出到底那是什么，然后再尽力更清晰地表达出来。      减少重复代码，提高表达力，提早构建简单抽象。这就是我写整洁代码的方法。 </li>\n</ol>\n<h3>第2章 有意义的命名</h3>\n<ol>\n<li>选个好名字要花时间，但省下来的时间比花掉的多。注意命名，而且一旦发现有更好的名称，就换掉旧的。</li>\n<li>别用 accountList来指称一组账号，除非它真的是 List类型。 List一词对程序员有特殊意义。如果包纳账号的容器并非真是个 List，就会引起错误的判断[ 3]。所以，用 accountGroup或 bunchOfAccounts，甚至直接用 accounts都会好一些。 </li>\n<li>以同样的方式拼写出同样的概念才是信息。拼写前后不一致就是误导。</li>\n<li>做有意义的区分：如果缺少明确约定，变量 moneyAmount就与 money没区别， customerInfo与 customer没区别， accountData与 account没区别， theMessage也与 message没区别。要区分名称，就要以读者能鉴别不同之处的方式来区分。 </li>\n<li>使用读得出来的名称</li>\n<li>使用可搜索的名称：窃以为单字母名称仅用于短方法中的本地变量。名称长短应与其作用域大小相对应 [N5]。若变量或常量可能在代码中多处使用，则应赋其以便于搜索的名称。</li>\n<li>接口和实现：前导字母 I被滥用到了说好听点是干扰，说难听点根本就是废话的程度。</li>\n<li>类名和对象名应该是名词或名词短语，类名不应当是动词。方法名应当是动词或动词短语</li>\n<li>每个概念对应一个词：每个抽象概念选一个词，并且一以贯之。例如，使用 fetch、 retrieve和 get来给在多个类中的同种方法命名。你怎么记得住哪个类中是哪个方法呢？</li>\n<li>这样的名称更为精确，而精确正是命名的要点。</li>\n</ol>","frontmatter":{"title":"代码整洁之道Clean Code","tags":["读书笔记"],"date":"November 23, 2019","description":"Robert C. Martin马丁 著"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/读书笔记/代码整洁之道Clean Code/","previous":{"fields":{"slug":"/绕小区一周/"},"frontmatter":{"title":"绕小区一周"}},"next":{"fields":{"slug":"/blog的设计元素/"},"frontmatter":{"title":"bolg的设计元素"}}}}}