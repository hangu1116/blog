{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["BlogIndex","renderTags","tags","length","style","styles","articleInfo","map","tag","tagBody","renderWriter","model","description","type","writer","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","location","height","node","frontmatter","fields","slug","key","marginBottom","rhythm","fontSize","fontWeight","boxShadow","color","to","date","dangerouslySetInnerHTML","__html","excerpt","marginTop","articleLine","React","Component","display","flexDirection","alignItems","marginLeft","backgroundColor","borderRadius","paddingLeft","paddingRight","marginRight","width","pageQuery"],"mappings":"yNAOMA,E,wLACJC,WAAA,SAAWC,GAGT,OAAKA,GAAwB,IAAhBA,EAAKC,OAId,yBAAKC,MAAOC,EAAOC,aAChBJ,EAAKK,KAAI,SAAAC,GAAG,OACX,yBAAKJ,MAAOC,EAAOI,SAAUD,OAL5B,M,EAWXE,aAAA,SAAaC,GAGX,OACGA,GACAA,EAAMC,aACND,EAAME,MACQ,YAAfF,EAAME,KAIC,0BAAMT,MAAOC,EAAOS,QAASH,EAAMC,YAAc,SAFjD,M,EAKXG,OAAA,WAAU,IAAD,OACCC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQC,SAAUT,KAAKC,MAAMQ,SAAUJ,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAM,cAEX,yBAAKlB,MAAO,CAAEuB,OAAQ,MACrBJ,EAAMhB,KAAI,YAAe,IAAZqB,EAAW,EAAXA,KACNN,EAAQM,EAAKC,YAAYP,OAASM,EAAKE,OAAOC,KACpD,OACE,6BAASC,IAAKJ,EAAKE,OAAOC,MACxB,gCACE,wBACE3B,MAAO,CACL6B,aAAcC,YAAO,KACrBC,SAAU,gBACVC,WAAY,kBAGd,kBAAC,OAAD,CACEhC,MAAO,CAAEiC,UAAU,OAASC,MAAO,oBACnCC,GAAIX,EAAKE,OAAOC,MAEfT,IAGL,yBAAKlB,MAAOC,EAAOC,aAChB,EAAKI,aAAakB,EAAKC,aACxB,2BAAOzB,MAAO,CAAEkC,MAAO,oBACpBV,EAAKC,YAAYW,MAEnB,EAAKvC,WAAW2B,EAAKC,YAAY3B,QAGX,YAA1B0B,EAAKC,YAAYhB,MAChB,iCACE,uBACE4B,wBAAyB,CACvBC,OAAQd,EAAKC,YAAYjB,aAAegB,EAAKe,SAE/CvC,MAAO,CACL+B,SAAU,GACVG,MAAO,qBACPF,WAAY,eACZQ,UAAWV,YAAO,EAAI,OAK9B,yBAAK9B,MAAOC,EAAOwC,oB,GAlFTC,IAAMC,WA2Ff/C,YAEf,IAAMK,EAAS,CACbC,YAAa,CACX0C,QAAS,OACTC,cAAe,MACfC,WAAY,UAEdzC,QAAS,CACPuC,QAAS,OAETG,WAAY,EACZD,WAAY,SACZvB,OAAQ,GACRQ,SAAU,GACVG,MAAO,uBACPc,gBAAiB,kBACjBC,aAAc,GACdC,YAAa,EACbC,aAAc,GAEhBzC,OAAQ,CACN0C,YAAa,GACbrB,SAAU,GACVG,MAAO,mBAETO,YAAa,CACXlB,OAAQ,EACR8B,MAAO,OACPN,WAAY,MACZP,UAAW,OACXQ,gBAAiB,qBAIRM,EAAS","file":"component---src-pages-index-js-e566e0600592a020e6c3.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nclass BlogIndex extends React.Component {\n  renderTags(tags) {\n    // console.log(tags);\n    // debugger;\n    if (!tags || tags.length === 0) {\n      return null\n    } else {\n      return (\n        <div style={styles.articleInfo}>\n          {tags.map(tag => (\n            <div style={styles.tagBody}>{tag}</div>\n          ))}\n        </div>\n      )\n    }\n  }\n  renderWriter(model) {\n    // console.log(tags);\n    // debugger;\n    if (\n      !model ||\n      !model.description ||\n      !model.type ||\n      model.type !== \"reading\"\n    ) {\n      return null\n    } else {\n      return <span style={styles.writer}>{model.description + \"    |\"}</span>\n    }\n  }\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        {/*<Bio />*/}\n        <div style={{ height: 80 }} />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <article key={node.fields.slug}>\n              <header>\n                <h4\n                  style={{\n                    marginBottom: rhythm(1 / 4),\n                    fontSize: \"var(--h3Size)\",\n                    fontWeight: \"var(--medium)\",\n                  }}\n                >\n                  <Link\n                    style={{ boxShadow: `none`, color: \"var(--titleText)\" }}\n                    to={node.fields.slug}\n                  >\n                    {title}\n                  </Link>\n                </h4>\n                <div style={styles.articleInfo}>\n                  {this.renderWriter(node.frontmatter)}\n                  <small style={{ color: \"var(--descText)\" }}>\n                    {node.frontmatter.date}\n                  </small>\n                  {this.renderTags(node.frontmatter.tags)}\n                </div>\n              </header>\n              {node.frontmatter.type !== \"reading\" && (\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: node.frontmatter.description || node.excerpt,\n                    }}\n                    style={{\n                      fontSize: 14,\n                      color: \"var(--contentText)\",\n                      fontWeight: \"var(--light)\",\n                      marginTop: rhythm(1 / 3),\n                    }}\n                  />\n                </section>\n              )}\n              <div style={styles.articleLine} />\n            </article>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nconst styles = {\n  articleInfo: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  tagBody: {\n    display: \"flex\",\n    // flex:0,\n    marginLeft: 8,\n    alignItems: \"center\",\n    height: 15,\n    fontSize: 12,\n    color: \"var(--transportText)\",\n    backgroundColor: \"var(--descText)\",\n    borderRadius: 10,\n    paddingLeft: 6,\n    paddingRight: 6,\n  },\n  writer: {\n    marginRight: 10,\n    fontSize: 12,\n    color: \"var(--descText)\",\n  },\n  articleLine: {\n    height: 1,\n    width: \"106%\",\n    marginLeft: \"-3%\",\n    marginTop: \"40px\",\n    backgroundColor: \"var(--lineColor)\",\n  },\n}\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { lock: { ne: true } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            tags\n            type\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}